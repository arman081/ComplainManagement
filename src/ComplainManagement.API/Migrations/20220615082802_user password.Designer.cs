// <auto-generated />
using System;
using ComplainManagement.API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComplainManagement.API.Migrations
{
    [DbContext(typeof(ComplainDbContext))]
    [Migration("20220615082802_user password")]
    partial class userpassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComplainManagement.Domain.DomainEntities.ComplainAndSolution", b =>
                {
                    b.Property<int>("ComplainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplainDetails")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplainStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ComplainTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComplainId");

                    b.HasIndex("ComplainTypeId")
                        .IsUnique();

                    b.ToTable("ComplainAndSolutions");
                });

            modelBuilder.Entity("ComplainManagement.Domain.DomainEntities.ComplainManagementUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("ComplainManagementUsers");
                });

            modelBuilder.Entity("ComplainManagement.Domain.DomainEntities.ComplainType", b =>
                {
                    b.Property<int>("ComplainTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplainTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ComplainTypeId");

                    b.ToTable("ComplainTypes");

                    b.HasData(
                        new
                        {
                            ComplainTypeId = 1,
                            ComplainTypeName = "Network",
                            CreatedDate = new DateTime(2022, 6, 15, 14, 28, 2, 382, DateTimeKind.Local).AddTicks(8476),
                            IsActive = true
                        },
                        new
                        {
                            ComplainTypeId = 2,
                            ComplainTypeName = "Billing",
                            CreatedDate = new DateTime(2022, 6, 15, 14, 28, 2, 383, DateTimeKind.Local).AddTicks(7736),
                            IsActive = true
                        },
                        new
                        {
                            ComplainTypeId = 3,
                            ComplainTypeName = "Call Drop",
                            CreatedDate = new DateTime(2022, 6, 15, 14, 28, 2, 383, DateTimeKind.Local).AddTicks(7752),
                            IsActive = true
                        },
                        new
                        {
                            ComplainTypeId = 4,
                            ComplainTypeName = "Internet",
                            CreatedDate = new DateTime(2022, 6, 15, 14, 28, 2, 383, DateTimeKind.Local).AddTicks(7754),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ComplainManagement.Domain.DomainEntities.ComplainAndSolution", b =>
                {
                    b.HasOne("ComplainManagement.Domain.DomainEntities.ComplainType", "ComplainType")
                        .WithOne("ComplainAndSolution")
                        .HasForeignKey("ComplainManagement.Domain.DomainEntities.ComplainAndSolution", "ComplainTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainType");
                });

            modelBuilder.Entity("ComplainManagement.Domain.DomainEntities.ComplainType", b =>
                {
                    b.Navigation("ComplainAndSolution");
                });
#pragma warning restore 612, 618
        }
    }
}
